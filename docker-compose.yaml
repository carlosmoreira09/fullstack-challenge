services:
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/app/web/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - challenge-network
    command: npm run dev -- --host 0.0.0.0
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    ports:
      - '3001:3001'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/app/api-gateway/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - AUTH_SERVICE_URL=tcp://auth-service:3002
      - TASKS_SERVICE_URL=tcp://tasks-service:3003
      - NOTIFS_SERVICE_URL=tcp://notifications-service:3004
      - USER_SERVICE_URL=tcp://notifications-service:3005
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  # Auth Service
  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: development
    ports:
      - '3002:3002'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/app/auth-service/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgres://postgres:password@db:5432/task-manager-jungle
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - JWT_SECRET=supersecret
      - JWT_REFRESH_SECRET=superrefresh
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  # Tasks Service
  tasks-service:
    container_name: tasks-service
    build:
      context: .
      dockerfile: ./apps/tasks-service/Dockerfile
      target: development
    ports:
      - '3004:3004'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/app/tasks-service/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgres://postgres:password@db:5432/task-manager-jungle
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  # Notifications Service
  notifications-service:
    container_name: notifications-service
    build:
      context: .
      dockerfile: ./apps/notifications-service/Dockerfile
      target: development
    ports:
      - '3003:3003'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/app/notifications-service/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgres://postgres:password@db:5432/task-manager-jungle
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - WS_PORT=3004
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network
  # Notifications Service
  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
      target: development
    ports:
      - '3005:3005'
    volumes:
      - .:/app
      - ./packages:/app/packages
      - /app/node_modules
      - /app/app/user-service/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=postgres://postgres:password@db:5432/task-manager-jungle
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network

  # Postgres Database
  db:
    image: postgres:17.5-alpine3.21
    container_name: db
    ports:
      - '5435:5432'
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: task-manager-jungle
    networks:
      - challenge-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - challenge-network

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  challenge-network:
    driver: bridge
